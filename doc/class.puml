@startuml

class Menu {
    - closeFlag: boolean
    - pauseFlag: boolean
    - options: List<Option>
    - exitTitle: String
    - title: String
    - ui: TextUI
    + Menu(title: String, exitTitle: String)
    + addOption(opt: Option): void
    + show(): void
}

abstract class Option {
    - title: String
    + Option(title: String)
    + getTitle(): String
    + run(ui: TextUI): void
}
Menu *-- Option
class OptionBook extends Option {
    + OptionBook()
    + run(ui: TextUI): void
}

class Hotel {
    - Database db

    + static void main()
}
enum PaymentMethod {
    ONLINE
    PHYSICAL_CARD
    PHYSICAL_CASH
}
class Customer {
    - String name
    - long hashName
    - PaymentMethod paymentmethod

    + static long hashName(String name)
    + Customer(String name)
    + Customer(String name, PaymentMethod paymentmethod)
    + String getName()
    + void setName(String name)
    + PaymentMethod getPaymentmethod()
    + void setPaymentmethod(PaymentMethod paymentmethod)
    + String toString()
}



class Booking {
    - Database db

    + Booking(Database db)
    + void startSession()
}



enum ExtraService {
    Spa
    Fitness
    Breakfast
    Casino
}

ExtraService : + prices: double[]

class Suite {
    - suiteID: int
    - rooms: List<Room>
    - price: double
    - holidayFactor: float
    - suiteType: SuiteType
    + Suite(suiteID: int, rooms: List<Room>, price: double, holidayFactor: float, suiteType: SuiteType)
    + getSuiteID(): int
    + setSuiteID(suiteID: int): void
    + getRooms(): List<Room>
    + setRooms(rooms: List<Room>): void
    + getPrice(): double
    + setPrice(price: double): void
    + getHolidayFactor(): float
    + setHolidayFactor(holidayFactor: float): void
    + getSuitType(): SuiteType
    + setSuitType(suiteType: SuiteType): void
    + toString(): String
}
enum SuitType {
    STANDARD
    LUXURY
}
class Room {
    - maxPeople: int
    + Room(maxPeople: int)
    + getMaxPeople(): int
    + setMaxPeople(maxPeople: int): void
    + toString(): String
}

interface Database {
    + boolean close()
    + void printTable(String name)
    + boolean addSuite(Suite suite)
    + boolean addRoom(Suite suite, Room room)
    + List<Room> getSuiteRooms(Suite suite)
    + boolean addCustomer(Customer customer)
    + Customer getCustomer(String name)
    + boolean removeCustomer(Customer customer)
    + List<Suite> getAvailSuites(int numPeople, Date startDate, Date endDate)
    + boolean bookSuite(Suite suite, Customer customer, int numPeople, Date startDate, Date endDate)
    + boolean freeSuite(int bookingID)
    + List<Suite> getCustomerSuites(Customer customer)
    + List<Bookings> getBookings(Customer customer)
}


class DatabaseSQLite implements Database {
    - Connection conn

    - long hashName(String name)
    + DatabaseSQLite(String url) throws IOException
    + boolean close()
    + void printTable(String name)
    + boolean addSuite(Suite suite)
    + boolean addRoom(Suite suite, Room room)
    + List<Room> getSuiteRooms(Suite suite)
    + boolean addCustomer(Customer customer)
    + Customer getCustomer(String name)
    + boolean removeCustomer(Customer customer)
    + List<Suite> getAvailSuites(int numPeople, Date startDate, Date endDate)
    + boolean bookSuite(Suite suite, Customer customer, int numPeople, Date startDate, Date endDate)
    + boolean freeSuite(int bookingID)
    + List<Suite> getCustomerSuites(Customer customer)
    + List<Bookings> getBookings(Customer customer)
}


class Log {
    - static PrintStream out
    + static void setOutputStream(OutputStream out)

    + static void warn(String msg)
    + static void error(String msg)
    + static void flush()
}
class TextUI {
    - Scanner scanner

    + TextUI()
    + void println(String message)
    + void print(String message)
    + String readLine(String prompt)
    + int readInt(String prompt)
    + boolean readYesNo(String prompt)
    + void close()
}
class Bookings {
    - int bookingID
    - int suiteID
    - int numPeople
    - Date startDate
    - Date endDate
    - double price

    + Bookings(int bookingID, int suiteID, int numPeople, Date startDate, Date endDate, double price)
    + int getBookingID()
    + int getSuiteID()
    + int getNumPeople()
    + Date getStartDate()
    + Date getEndDate()
    + double getPrice()
}
class OptionCancel extends Option {
    + OptionCancel()
    + void run(TextUI ui)
}
class OptionCheckout extends Option {
    + OptionCheckout()
    + void run(TextUI ui)
}



Hotel *-- Database
Customer *-- PaymentMethod
Customer *-- Suite
Suite *-- Room
Suite *-- SuitType
Booking *-- Menu
Hotel *-- Booking
Database *-- ExtraService
OptionBook *-- ExtraService
Option *-- TextUI
Menu *-- TextUI
Database *-- Bookings
Database *-- Room
Database *-- Suite
@enduml